name: build-linux-amd64-wheels
'on':
  workflow_dispatch:
    inputs:
      packages:
        type: string
        description: Pkgs to build (comma-separated, empty for all)
        required: false
      graalpy_url:
        type: string
        description: GraalPy download url
        required: true
jobs:
  build_wheels:
    runs-on:
      - ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    env:
      PACKAGES_TO_BUILD: ${{ inputs.packages }}
    steps:
      - name: Install dependencies
        run: |
          dnf install -y epel-release
          crb enable
          dnf makecache --refresh
          dnf module install -y nodejs:18
          dnf install -y /usr/bin/patch
      - name: Checkout
        uses: actions/checkout@main
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: "-A warnings -A unexpected-cfgs -A unused-macros -A static-mut-refs -A unused-variables -A unused-imports"
          cache: false
      - name: 安装lxml依赖
        run: dnf install -y libxml2-devel libxslt-devel
      - name: Install system build dependencies (dnf)
        run: |
          # 如果需要 epel（ninja 在 epel 可用），先尝试启用
          dnf -y install epel-release
          dnf -y update
          # 对于 AlmaLinux，启用 powertools 而不是 crb
          dnf -y install dnf-plugins-core
          dnf -y config-manager --set-enabled powertools || dnf -y config-manager --set-enabled crb || echo "无法启用 powertools/crb，继续执行"
          # 安装开发工具组
          dnf -y groupinstall "Development Tools"
          # 安装基础编译工具和依赖
          dnf -y install \
            gcc gcc-c++ gcc-gfortran make cmake pkgconfig git\
            python3-devel python3-pip python3-virtualenv \
            openblas-devel lapack-devel blas-devel\
            libgcrypt-devel libgpg-error-devel \
            libxml2-devel libxslt-devel xz-devel \
            ninja-build libjpeg-turbo-devel zlib-devel libpng-devel  
      
      - name: Pre-install Python build-time tools
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          # meson/ninja/pythran/pybind11 在 SciPy 构建阶段必须可用
          python3 -m pip install meson ninja pythran pybind11
      - name: Install qdrant-client with specific grpcio version
        run: |
          # 创建约束文件
          cat > constraints.txt << 'EOF'
          grpcio==1.72.0rc1
          EOF
          
          # 使用约束文件安装
          python3 -m pip install --constraint constraints.txt qdrant-client==1.15.1
          
          # 验证版本
          python3 -c "import grpc, qdrant_client; print(f'grpcio: {grpc.__version__}, qdrant-client: {qdrant_client.__version__}')"

      - name: Install Rust toolchain (actions-rs)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Build wheels
        run: |
          python3 -m venv wheelbuilder_venv
          wheelbuilder_venv/bin/python3 scripts/wheelbuilder/build_wheels.py ${{ inputs.graalpy_url }}
      - name: Store wheels
        uses: actions/upload-artifact@main
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error
